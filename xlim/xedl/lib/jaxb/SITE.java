//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.1.2-b01-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2007.02.14 at 02:11:19 PM CET 
//


package xedl.lib.jaxb;

import java.io.PrintWriter;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyElement;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;

import services.isabel.lib.Constants;

import xedl.lib.jaxb.ProtectionType.Hamming;
import xedl.lib.jaxb.ProtectionType.Parity;
import xedl.lib.jaxb.SiteIdentification.ADMINISTRATIVEINFORMATION;
import xedl.lib.xedl.XEDLException;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{}site-identification"/>
 *         &lt;element name="SITE-ROLE" type="{}site_role_type" minOccurs="0"/>
 *         &lt;element ref="{}CONNECTION-MODE" minOccurs="0"/>
 *         &lt;element ref="{}connection-parameters" minOccurs="0"/>
 *         &lt;element ref="{}NETWORK-ACCESS"/>
 *         &lt;element name="ENABLE_MCU" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *         &lt;element name="CONTROL-CAPABILITIES" type="{http://www.w3.org/2001/XMLSchema}anyType" minOccurs="0"/>
 *         &lt;element ref="{}media-control" minOccurs="0"/>
 *         &lt;element ref="{}IPSEC_CONF" minOccurs="0"/>
 *         &lt;element ref="{}SITE_ADDITIONAL_PARAMS"/>
 *         &lt;any/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "siteIdentification",
    "siterole",
    "connectionmode",
    "connectionParameters",
    "networkaccess",
    "enablemcu",
    "controlcapabilities",
    "mediaControl",
    "ipsecconf",
    "siteadditionalparams",
    "any"
})
@XmlRootElement(name = "SITE")
public class SITE {

    @XmlElement(name = "site-identification", required = true)
    protected SiteIdentification siteIdentification;
    @XmlElement(name = "SITE-ROLE")
    protected String siterole;
    @XmlElement(name = "CONNECTION-MODE")
    protected CONNECTIONMODE connectionmode;
    @XmlElement(name = "connection-parameters")
    protected ConnectionParameters connectionParameters;
    @XmlElement(name = "NETWORK-ACCESS", required = true)
    protected NETWORKACCESS networkaccess;
    @XmlElement(name = "ENABLE_MCU")
    protected Boolean enablemcu;
    @XmlElement(name = "CONTROL-CAPABILITIES")
    protected Object controlcapabilities;
    @XmlElement(name = "media-control")
    protected MediaControl mediaControl;
    @XmlElement(name = "IPSEC_CONF")
    protected IPSECCONF ipsecconf;
    @XmlElement(name = "SITE_ADDITIONAL_PARAMS", required = true)
    protected SITEADDITIONALPARAMS siteadditionalparams;
    @XmlAnyElement(lax = true)
    protected List<Object> any;

    @XmlTransient public PrintWriter outTraceFile= null;
    
    /**
     * Contructor añadido por Enrique para que por defecto tenga NetworkAccess Ethernet y siteaditionalparams vacío
     * 
     */
    public SITE()
    {
    	setNetworkAccessEthernet();
    	siteadditionalparams = new SITEADDITIONALPARAMS();
    	outTraceFile = Constants.inicializa_trazas_jaxb();
    }
    
    
    /**
     * Gets the value of the siteIdentification property.
     * 
     * @return
     *     possible object is
     *     {@link SiteIdentification }
     *     
     */
    public SiteIdentification getSiteIdentification() {
        return siteIdentification;
    }

    /**
     * Sets the value of the siteIdentification property.
     * 
     * @param value
     *     allowed object is
     *     {@link SiteIdentification }
     *     
     */
    public void setSiteIdentification(SiteIdentification value) {
        this.siteIdentification = value;
    }

    /**
     * Gets the value of the siterole property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSITEROLE() {
        return siterole;
    }

    /**
     * Sets the value of the siterole property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSITEROLE(String value) {
        this.siterole = value;
    }

    /**
     * Gets the value of the connectionmode property.
     * 
     * @return
     *     possible object is
     *     {@link CONNECTIONMODE }
     *     
     */
    public CONNECTIONMODE getCONNECTIONMODE() {
        return connectionmode;
    }

    /**
     * Sets the value of the connectionmode property.
     * 
     * @param value
     *     allowed object is
     *     {@link CONNECTIONMODE }
     *     
     */
    public void setCONNECTIONMODE(CONNECTIONMODE value) {
        this.connectionmode = value;
    }

    /**
     * Gets the value of the connectionParameters property.
     * 
     * @return
     *     possible object is
     *     {@link ConnectionParameters }
     *     
     */
    public ConnectionParameters getConnectionParameters() {
        return connectionParameters;
    }

    /**
     * Sets the value of the connectionParameters property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConnectionParameters }
     *     
     */
    public void setConnectionParameters(ConnectionParameters value) {
        this.connectionParameters = value;
    }

    /**
     * Gets the value of the networkaccess property.
     * 
     * @return
     *     possible object is
     *     {@link NETWORKACCESS }
     *     
     */
    public NETWORKACCESS getNETWORKACCESS() {
        return networkaccess;
    }

    /**
     * Sets the value of the networkaccess property.
     * 
     * @param value
     *     allowed object is
     *     {@link NETWORKACCESS }
     *     
     */
    public void setNETWORKACCESS(NETWORKACCESS value) {
        this.networkaccess = value;
    }

    /**
     * Gets the value of the enablemcu property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isENABLEMCU() {
        return enablemcu;
    }

    /**
     * Sets the value of the enablemcu property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setENABLEMCU(Boolean value) {
        this.enablemcu = value;
    }

    /**
     * Gets the value of the controlcapabilities property.
     * 
     * @return
     *     possible object is
     *     {@link Object }
     *     
     */
    public Object getCONTROLCAPABILITIES() {
        return controlcapabilities;
    }

    /**
     * Sets the value of the controlcapabilities property.
     * 
     * @param value
     *     allowed object is
     *     {@link Object }
     *     
     */
    public void setCONTROLCAPABILITIES(Object value) {
        this.controlcapabilities = value;
    }

    /**
     * Gets the value of the mediaControl property.
     * 
     * @return
     *     possible object is
     *     {@link MediaControl }
     *     
     */
    public MediaControl getMediaControl() {
        return mediaControl;
    }

    /**
     * Sets the value of the mediaControl property.
     * 
     * @param value
     *     allowed object is
     *     {@link MediaControl }
     *     
     */
    public void setMediaControl(MediaControl value) {
        this.mediaControl = value;
    }

    /**
     * Gets the value of the ipsecconf property.
     * 
     * @return
     *     possible object is
     *     {@link IPSECCONF }
     *     
     */
    public IPSECCONF getIPSECCONF() {
        return ipsecconf;
    }

    /**
     * Sets the value of the ipsecconf property.
     * 
     * @param value
     *     allowed object is
     *     {@link IPSECCONF }
     *     
     */
    public void setIPSECCONF(IPSECCONF value) {
        this.ipsecconf = value;
    }

    /**
     * Gets the value of the siteadditionalparams property.
     * 
     * @return
     *     possible object is
     *     {@link SITEADDITIONALPARAMS }
     *     
     */
    public SITEADDITIONALPARAMS getSITEADDITIONALPARAMS() {
        return siteadditionalparams;
    }

    /**
     * Sets the value of the siteadditionalparams property.
     * 
     * @param value
     *     allowed object is
     *     {@link SITEADDITIONALPARAMS }
     *     
     */
    public void setSITEADDITIONALPARAMS(SITEADDITIONALPARAMS value) {
        this.siteadditionalparams = value;
    }

    /**
     * Gets the value of the any property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the any property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAny().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getAny() {
        if (any == null) {
            any = new ArrayList<Object>();
        }
        return this.any;
    }

    
    public String getID()
	{
		SiteIdentification siteid = this.getSiteIdentification();
		return siteid.getID();
	}

	public void setID(String id)
	{
		SiteIdentification siteid = this.getSiteIdentification();
		if(siteid==null)
		{
			siteid = new SiteIdentification();
		}
		siteid.setID(id);
		this.setSiteIdentification(siteid);
	}	
	
	public String getPUBLICNAME()
	{
		SiteIdentification siteid = this.getSiteIdentification();
		return siteid.getPUBLICNAME();
	}
	
	public void setPUBLICNAME(String publicname)
	{
		SiteIdentification siteid = this.getSiteIdentification();
		siteid.setPUBLICNAME(publicname);
		this.setSiteIdentification(siteid);
	}
	
	/**
	 * Method to get automatically the first address
	 * if you want all of them use the original methods
	 * @param address
	 */
	public String getSITEADDRESS()
	{
		SiteIdentification siteid = this.getSiteIdentification();
		List<String> lista = siteid.getSITEADDRESS();
		return lista.get(0);
	}
	
	/**
	 * Method to set one address for the site
	 * if you want to set more than one use addSITEADDRESS
	 * @param address
	 */
	public void setSITEADDRESS(String address)
	{
		SiteIdentification siteid = this.getSiteIdentification();
		List lista = siteid.getSITEADDRESS();
		lista.add(address);
		this.setSiteIdentification(siteid);
	}
	
	/**
	 * Method to add an address to the addresses existing
	 * @param address
	 */
	public void addSITEADDRESS(String address)
	{
		SiteIdentification siteid = this.getSiteIdentification();
		List lista = siteid.getSITEADDRESS();
		lista.add(address);
		this.setSiteIdentification(siteid);
	}
	
	/**
	 * method to set the network access to ethernet
	 *
	 */
	public void setNetworkAccessEthernet()
	{
		NETWORKACCESS acceso = this.getNETWORKACCESS();
		if(acceso==null)
		{
			acceso = new NETWORKACCESS();
		}
		acceso.setEthernet(true);
		this.setNETWORKACCESS(acceso);
	}
	
	/**
	 * Sets NETWORK-ACCESS to ISDN.Returns null if some problem happened(for example: NETWORK-ACCESS was already set to Ethernet).
	 * Default ISDN role is set to "called" and the number of channels to 0.
	 */
	public void setNetworkAccessISDN()
	{
		NETWORKACCESS acceso = new NETWORKACCESS();
		ISDN new_isdn = new ISDN();
			ISDNParameters params = new ISDNParameters();
			ISDNCalled called = new ISDNCalled();
			called.setISDNCHANNELS(0);
			params.setISDNCalled(called);
		new_isdn.setISDNParameters(params);
		acceso.setISDN(new_isdn);
		this.setNETWORKACCESS(acceso);
	}
	
	
	/**
	*	Returns the IP of the parent site.WARNING:This function searches in CONNECTION-MODE fields keeping this 
	*   preference order:MCU_ADDRESS->PEER_ADDRESS->MCAST_ROOT.The IP address returned will be the first one found.
	*   returns null if no connection_mode found (maybe this is the master site)
	**/	
		public String getParentSiteAddress(){
		   CONNECTIONMODE con_mode = this.getCONNECTIONMODE();
      	   if(con_mode==null) return null;
		   Mcu mi_mcu = con_mode.getMcu();
      	   if(mi_mcu != null)
      	   {
      		   return mi_mcu.getMCUADDRESS().get(0);
      	   }
      	   Unicast uni = con_mode.getUnicast();
      	   if(uni!=null)
      	   {
      		   return uni.getPEERADDRESS().get(0);
      	   }
      	   Multicast multi = con_mode.getMulticast();
      	   if(multi != null)
      	   {
      		   return multi.getMulticastParameters().getMCASTROOT();
      	   }
      	   return null;
		}
		
		
   /**
   * Returns this site object site addresses fields.Returns null if empty or not found.
   */
       public LinkedList getSiteAddress(){
    	   LinkedList linked = new LinkedList();
    	   List<String> list = getSiteIdentification().getSITEADDRESS();
    	   if(list.isEmpty()) return null;
    	   for(int i=0;i<list.size();i++)
    	   {
    		   linked.add(list.get(i));
    	   }
    	   return linked;
       }
		
       
       /**
        * Returns this site object MCU address field.Returns null if empty or not found.
        */
       public LinkedList getMCUAddress()
       {
    	   CONNECTIONMODE con_mode = this.getCONNECTIONMODE();
      	   if(con_mode==null) return null;
		   Mcu mi_mcu = con_mode.getMcu();
      	   if(mi_mcu != null)
      	   {
      		 List<String> list = mi_mcu.getMCUADDRESS();
      		 LinkedList linked = new LinkedList();
      		 for(int i=0;i<list.size();i++)
      		 {
      			 String temp = list.get(i);
      			 linked.add(temp);
      		 }
      		   return linked;
      	   }
      	   return null;
       }
       
       
       /**
        * Returns this site object peer address field.Returns null if empty or not found.
        */
        public LinkedList getPeerAddress(){
           CONNECTIONMODE con_mode = this.getCONNECTIONMODE();
       	   if(con_mode==null) return null;
       	   Unicast uni = con_mode.getUnicast();
       	   if(uni!=null)
       	   {
       		 List<String> list = uni.getPEERADDRESS();
       		 LinkedList linked = new LinkedList();
       		 for(int i=0;i<list.size();i++)
       		 {
       			 linked.add(list.get(i));
       		 }
       		   return linked;
       	   }
       	   return null;	
        }
        
        
        /**
         * Method to delete the MCU address to where this site is connected to
         * returns true if the mcu was deleted, false if there was no mcu address or it was no present
         */
        public boolean deleteMCUAddress(String address){
           CONNECTIONMODE con_mode = this.getCONNECTIONMODE();
       	   if(con_mode==null) 
       		   return false;
 		   Mcu mi_mcu = con_mode.getMcu();
       	   if(mi_mcu != null)
       	   {
       		 List<String> list = mi_mcu.getMCUADDRESS();
       		 list.remove(address);
       		 if(list.size()==0)
       			 con_mode.setMcu(null);
       	   }
       	   return false;
        }
        
        
       /**
        * Inserts a new MCU_ADDRESS field.
        * If "first" parameter is true,it is inserted at the beginning,
        * otherwise it is inserted at the end.Returns true if everything goes ok
        */
        public boolean insertMCUAddress(String address, boolean first){
        	CONNECTIONMODE con_mode = this.getCONNECTIONMODE();
        	if(con_mode==null) 
        	{
        		//i create it
        		con_mode = new CONNECTIONMODE();
        		
        	}
  		    Mcu mi_mcu = con_mode.getMcu();
        	
  		    if(mi_mcu == null)
        	{
  		    	mi_mcu = new Mcu();
        	}
  		    List<String> list = mi_mcu.getMCUADDRESS();
   		 	if(first)
   		 		list.add(0, address);
   		 	else
   		 		list.add(address);
   		 	
   		 	con_mode.setMcu(mi_mcu);
   		 	this.setCONNECTIONMODE(con_mode);
   		 	return true;
        }
        
                       
        /**
         * Deletes mcu connection mode field.
         * WARNING:all mcu addresses will be deleted.
         * Returns true if everything goes ok.False otherwhise.
         */
	      public boolean deleteMCUConnectionMode(){
	    	  CONNECTIONMODE con_mode = this.getCONNECTIONMODE();
	       	  if(con_mode==null) 
	       		   return false;
	 		  con_mode.setMcu(null);
	      	  return true;
	      }
		
	    
	      /**
	        * Inserts a new PEER_ADDRESS field.
	        * If "first" parameter is true,it is inserted at the beginning,
	        * otherwise it is inserted at the end.Returns true if everything goes ok
	        */
	        public boolean insertPeerAddress(String address, boolean first){
	        	CONNECTIONMODE con_mode = this.getCONNECTIONMODE();
	        	if(con_mode==null) 
	        	   return false;
	  		    Unicast unic = con_mode.getUnicast();
	        	
	  		    if(unic == null)
	        	{
	  		    	unic = new Unicast();
	        	}
	  		    List<String> list = unic.getPEERADDRESS();
	   		 	if(first)
	   		 		list.add(0, address);
	   		 	else
	   		 		list.add(address);
	   		 	con_mode.setUnicast(unic);
	   		 	return true;
	        }
	      
	        
      /**
  	   * Deletes multicast CONNECTION-MODE.Returns true if everything was ok
   	   **/
		  public boolean deleteMulticastConnectionMode(){
			  CONNECTIONMODE con_mode = this.getCONNECTIONMODE();
	       	  if(con_mode==null) 
	       		   return false;
	 		  con_mode.setMulticast(null);
	      	  return true; 
		  
		  }
	      
		  
	   /**
		* Creates a new multicast CONNECTION-MODE parameter
		**/
		public MulticastParameters setConnectionModeMulticast(){
			 CONNECTIONMODE mi_con = getCONNECTIONMODE();
			 if(mi_con==null)
			 {
				 mi_con = new CONNECTIONMODE();
			 }
			 Multicast multi = mi_con.getMulticast();
			 if(multi==null)
			 {
				 multi = new Multicast();
			 }
			 MulticastParameters params = multi.getMulticastParameters();
			 if(params==null)
			 {
				 params = new MulticastParameters();
			 }
             multi.setMulticastParameters(params);
             mi_con.setMulticast(multi);
             setCONNECTIONMODE(mi_con);
             return params;            
		}
		  
		
		
		/**
  		 * Inserts multicast-parameters node already created.
  		 * Returns MulticastParams object created or null if some trouble happened.
  		 **/
		 public MulticastParameters addMulticastParams(MulticastParameters mp){
			 CONNECTIONMODE mi_con = getCONNECTIONMODE();
			 if(mi_con==null)
			 {
				 mi_con = new CONNECTIONMODE();
			 }
			 Multicast multi = mi_con.getMulticast();
			 if(multi==null)
			 {
				 multi = new Multicast();
			 }
	         multi.setMulticastParameters(mp);
	         mi_con.setMulticast(multi);
	         setCONNECTIONMODE(mi_con);
	         return mp;
         }
		
		/**
		 *  Inserts SiteAddress field.If first==true inserts at the beginning,else appends at the end.Returns true if everything goes ok.
		 */
		 public boolean insertSiteAddress(String address,boolean first){
			 List<String> lista = this.getSiteIdentification().getSITEADDRESS();
			 if(first)
			 {
				 lista.add(0, address);
				 return true;
			 }
			 else
			 {
				 lista.add(address);
				 return true;
			 }
		 }
		   
		  
		  
	     /**
	      * Deletes SiteAddress field identified by "address".Returns true if everything goes ok.
	      */
	      public boolean deleteSiteAddress(String address){
	    	    List<String> lista = this.getSiteIdentification().getSITEADDRESS();
	    	    if(lista.isEmpty())
	    	    	return false;
	    	    if(lista.contains(address))
	    	    	return lista.remove(address);
	    	    return false;
	      }
	      
        
	     /**
	      * Deletes PEER_ADDRESS field identified by "address".
	      * Returns true if everything goes ok.False otherwhise.
	      */
          public boolean deletePeerAddress(String address){
        	    CONNECTIONMODE con_mode = this.getCONNECTIONMODE();
	        	if(con_mode==null) 
	        	   return false;
	  		    Unicast unic = con_mode.getUnicast();
	        	
	  		    if(unic == null)
	        	{
	  		    	return false;
	        	}
	  		    List<String> list = unic.getPEERADDRESS();
	   		 	return list.remove(address);
          }
	      
	      
        /**
         * Method to obtain the admin info emails
         */
        public LinkedList getAdminInfoEmails(){
        	LinkedList emails = new LinkedList();
        	if(getSiteIdentification()!=null && getSiteIdentification().getADMINISTRATIVEINFORMATION()!=null)
        	{
        		List<PersonalInformation> lista = getSiteIdentification().getADMINISTRATIVEINFORMATION().getADMINISTRATIVECONTACT();
        		for(int i=0;i<lista.size();i++)
          		{
          			emails.add(lista.get(i).getEMAIL());
          		}
        	}
        	return emails;
        }
        
        
        /**
         * Method to obtain the admin info emails
         */
        public LinkedList getAdminInfoNames(){
        	LinkedList names = new LinkedList();
        	if(getSiteIdentification()!=null && getSiteIdentification().getADMINISTRATIVEINFORMATION()!=null)
        	{
        		List<PersonalInformation> lista = getSiteIdentification().getADMINISTRATIVEINFORMATION().getADMINISTRATIVECONTACT();
        		for(int i=0;i<lista.size();i++)
          		{
          			names.add(lista.get(i).getNAME());
          		}
        	}
        	return names;
        }
        
        
        /**
         * Method to obtain the tech info emails
         */
        public LinkedList getTechInfoEmails(){
        	LinkedList emails = new LinkedList();
        	if(getSiteIdentification()!=null && getSiteIdentification().getADMINISTRATIVEINFORMATION()!=null)
        	{
        		List<PersonalInformation> lista = getSiteIdentification().getADMINISTRATIVEINFORMATION().getTECHNICALCONTACT();
        		for(int i=0;i<lista.size();i++)
          		{
          			emails.add(lista.get(i).getEMAIL());
          		}
        	}
        	return emails;
        }
        
        
        /**
         * Method to obtain the tech info emails
         */
        public LinkedList getTechInfoNames(){
        	LinkedList names = new LinkedList();
        	if(getSiteIdentification()!=null && getSiteIdentification().getADMINISTRATIVEINFORMATION()!=null)
        	{
        		List<PersonalInformation> lista = getSiteIdentification().getADMINISTRATIVEINFORMATION().getTECHNICALCONTACT();
        		
          		for(int i=0;i<lista.size();i++)
          		{
          			names.add(lista.get(i).getNAME());
          		}
        	}
        	return names;
        }
        
        
        /**
         * Returns TECHNICAL_CONTACT already created identified by this email.
         **/
         public PersonalInformation getTechContact(String email){
        	if(getSiteIdentification()!=null && getSiteIdentification().getADMINISTRATIVEINFORMATION()!=null)
         	{
         		List<PersonalInformation> lista = getSiteIdentification().getADMINISTRATIVEINFORMATION().getTECHNICALCONTACT();
         		for(int i=0;i<lista.size();i++)
          		{
          			if(email.equals(lista.get(i).getEMAIL()))
          				return (PersonalInformation) lista.get(i);
          		}
              return null;
           }
           return null;
        }
        
         
        /**
         * Returns ADMINISTRATIVE_CONTACT already created identified by this email.
         **/
         public PersonalInformation getAdminContact(String email){
        	if(getSiteIdentification()!=null && getSiteIdentification().getADMINISTRATIVEINFORMATION()!=null)
         	{
         		List<PersonalInformation> lista = getSiteIdentification().getADMINISTRATIVEINFORMATION().getADMINISTRATIVECONTACT();
         		for(int i=0;i<lista.size();i++)
          		{
          			if(email.equals(lista.get(i).getEMAIL()))
          				return (PersonalInformation) lista.get(i);
          		}
              return null;
           }
           return null;
        }
        
         
       /**
        * Returns this site object up bandwith field.Returns -1 if empty or not found.
        */
        public int getUpBandwidth(){
        	if(getConnectionParameters()!=null && getConnectionParameters().getUpanddownbandwidth()!=null)
        		return getConnectionParameters().getUpanddownbandwidth().getUPBANDWIDTH();
        	else
        		return -1;
        }
      
        
        /**
         * Returns this site object up bandwith field.Returns -1 if empty or not found.
         */
         public int getDownBandwidth(){
         	if(getConnectionParameters()!=null && getConnectionParameters().getUpanddownbandwidth()!=null)
         		return getConnectionParameters().getUpanddownbandwidth().getDOWNBANDWIDTH();
         	else
         		return -1;
         }
         
        
        /**
         * Returns this site object up bandwith field.Returns -1 if empty or not found.
         */
         public int getBandwidth(){
         	if(getConnectionParameters()!=null)
         		return getConnectionParameters().getBANDWIDTH();
         	else
         		return -1;
         }
        
         
         public boolean setBandwidth(int bw){
        	 if(getConnectionParameters()!=null)
        	 {
          		 getConnectionParameters().setBANDWIDTH(new Integer(bw));
          		 return true;
        	 }
          	 else
          		return false;
         }
        
         
         public boolean setUpBandwidth(int bw)
         {
        	 ConnectionParameters params = getConnectionParameters();
        	 if(params==null)
        	 {
        		 params = new ConnectionParameters();
        		 setConnectionParameters(params);
        	 }
        	 Upanddownbandwidth upanddown = params.getUpanddownbandwidth();
        	 if(upanddown==null)
        	 {
        		 upanddown = new Upanddownbandwidth();
        		 params.setUpanddownbandwidth(upanddown);
        	 }
        	 upanddown.setUPBANDWIDTH(bw);
        	 return true;
         }
         
         
         
         public boolean setDownBandwidth(int bw)
         {
        	 ConnectionParameters params = getConnectionParameters();
        	 if(params==null)
        	 {
        		 params = new ConnectionParameters();
        		 setConnectionParameters(params);
        	 }
        	 Upanddownbandwidth upanddown = params.getUpanddownbandwidth();
        	 if(upanddown==null)
        	 {
        		 upanddown = new Upanddownbandwidth();
        		 params.setUpanddownbandwidth(upanddown);
        	 }
        	 upanddown.setDOWNBANDWIDTH(bw);
        	 return true;
         }
         
         
         
         /**
          * Returns this site object enable MCU field.Returns false if empty or not found.
          */
          public boolean getEnableMCU(){
        	  if(isENABLEMCU()==null)
        		  return false;
        	  return isENABLEMCU();
          }  
                   
        
       /**
        * Returns this site object access control field.Returns null if empty or not found.
        */
        public String getAccessControl(){
        	if(getSiteIdentification()!=null)
        	{
        		return getSiteIdentification().getACCESSCONTROL();
        	}
        	return null;
        }
        
        
       /**
        * Sets site access control field.Returns true if everything goes ok
        */
        public boolean setAccessControl(String ac){
        	SiteIdentification siteid = getSiteIdentification();
        	if(siteid==null)
        	{
        		siteid=new SiteIdentification();
        		setSiteIdentification(siteid);
        	}
        	if(ac==null || ac.equals(""))
        	{
        		siteid.setACCESSCONTROL(null);
        		return true;
        	}
        	siteid.setACCESSCONTROL(ac);
        	return true;
        }
        
        /**
         * Returns this site object description field.Returns null if empty or not found.
         */
        public String getDescription(){
        	if(getSiteIdentification()!=null && getSiteIdentification().getADMINISTRATIVEINFORMATION()!=null)
        	{
        		//ver linea 568 de XEDLManager para ver como se haría el setdescription
        		org.w3c.dom.Element mielem = (org.w3c.dom.Element) getSiteIdentification().getADMINISTRATIVEINFORMATION().getDESCRIPTION();
        		return mielem.getTextContent();
        	}
        	return null;
        }
        
        
       /**
        * Sets site Description field.Returns true if everything goes ok
        */
        public boolean setDescription(String desc){
        	if(getSiteIdentification()!=null && getSiteIdentification().getADMINISTRATIVEINFORMATION()!=null)
        	{
        		DocumentBuilder db = null;
        		try {
        			db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        		} catch (ParserConfigurationException e) {			
        			e.printStackTrace(outTraceFile);
        		}
                Document doc = db.newDocument();
                outTraceFile.println("document creado, vamos a crear elemento Description");
                org.w3c.dom.Element desc_elem = doc.createElement("DESCRIPTION");
                desc_elem.setTextContent(desc);
                //desc_elem.setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                getSiteIdentification().getADMINISTRATIVEINFORMATION().setDESCRIPTION(desc_elem);
                return true;
        	}
        	return false;
            	
        }
        
        /**
         * Returns this site object URL field.Returns null if empty or not found.
         */
        public URL getURL() throws MalformedURLException {
        	if(getSiteIdentification()!=null && getSiteIdentification().getADMINISTRATIVEINFORMATION()!=null)
        	{
        		URL laurl = new URL(getSiteIdentification().getADMINISTRATIVEINFORMATION().getURL());
        		return laurl;
        	}
        	return null;
        }
        
        
       /**
        *Sets site URL field.Returns true if everything goes ok
        */
        public boolean setURL(URL url) {
        	if(getSiteIdentification()!=null && getSiteIdentification().getADMINISTRATIVEINFORMATION()!=null)
        	{
        		getSiteIdentification().getADMINISTRATIVEINFORMATION().setURL(url.toString());
        		return true;
        	}
        	return false;	
        }
        
        /**
         * Returns this site object Institution field.Returns null if empty or not found.
         */
        public String getInstitution(){
        	if(getSiteIdentification()!=null && getSiteIdentification().getADMINISTRATIVEINFORMATION()!=null)
        	{
        		//ver linea 568 de XEDLManager para ver como se haría el setdescription
        		org.w3c.dom.Element mielem = (org.w3c.dom.Element) getSiteIdentification().getADMINISTRATIVEINFORMATION().getINSTITUTION();
        		if(mielem==null) return null;
        		return mielem.getTextContent();
        	}
        	return null;
        }
        
        
       /**
        * Sets site Institution field.Returns true if everything goes ok
        */
        public boolean setInstitution(String institution){
        	if(getSiteIdentification()!=null && getSiteIdentification().getADMINISTRATIVEINFORMATION()!=null)
        	{
        		DocumentBuilder db = null;
        		try {
        			db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        		} catch (ParserConfigurationException e) {			
        			e.printStackTrace(outTraceFile);
        		}
                Document doc = db.newDocument();
                outTraceFile.println("document creado, vamos a crear elemento Institution");
                org.w3c.dom.Element inst_elem = doc.createElement("INSTITUTION");
                inst_elem.setTextContent(institution);
                //desc_elem.setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                getSiteIdentification().getADMINISTRATIVEINFORMATION().setINSTITUTION(inst_elem);
                return true;
        	}
        	return false;
            	
        }
        
        
        /**
         * Inserts a given ADMINISTRATIVE_CONTACT (PersonalInformation type object) in this site.Returns true if everything goes ok
         **/
        public boolean insertAdminContact(PersonalInformation ai){
            return this.insertPersonalInfo(ai, true);
        }
        
        
        /**
         * Inserts a given TECHNICAL_CONTACT (PersonalInfo type object) in this site.Returns true if everything goes ok
         **/
         public boolean insertTechContact(PersonalInformation ti){
           return this.insertPersonalInfo(ti, false);
        }
        
        
        /**
         * Inserts a given PersonalInfo in this site.Returns true if everything goes ok
         * is_administrative indicates if the contact is administrative (true) or technical (false)
         **/
        public boolean insertPersonalInfo(PersonalInformation pi, boolean is_administrative){
           if(getSiteIdentification()==null)
           {
        	   SiteIdentification siteid = new SiteIdentification();
        	   setSiteIdentification(siteid);
           }
           if(getSiteIdentification().getADMINISTRATIVEINFORMATION()==null)
           {
        	   ADMINISTRATIVEINFORMATION admin = new ADMINISTRATIVEINFORMATION();
        	   getSiteIdentification().setADMINISTRATIVEINFORMATION(admin);
       	   }
           if(is_administrative)
           {
        	   List<PersonalInformation> lista = getSiteIdentification().getADMINISTRATIVEINFORMATION().getADMINISTRATIVECONTACT();
        	   lista.add(pi);
        	   return true;
           }
           else
           {
        	   List<PersonalInformation> lista = getSiteIdentification().getADMINISTRATIVEINFORMATION().getTECHNICALCONTACT();
        	   lista.add(pi);
        	   return true;
           }           
       }
        
        
        /**
         * Returns this site object controller capabilities field.Returns null if empty or not found.
         */
         public String getControlCapabilities(){
        	 org.w3c.dom.Element mielem = (org.w3c.dom.Element)getCONTROLCAPABILITIES();
        	 if(mielem!=null)
        	 {
        	 return mielem.getTextContent();
        	 }
        	 else
        		 return null;
         }
       
         
        /**
         * Sets site Control capabilities field.Returns true if everything goes ok
         */
         public boolean setControlCapabilities(String ctrl){
        	 DocumentBuilder db = null;
     		 try {
     			db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
     		 } catch (ParserConfigurationException e) {			
     			e.printStackTrace(outTraceFile);
     		 }
             Document doc = db.newDocument();
             outTraceFile.println("document creado, vamos a crear elemento control capabilities");
             org.w3c.dom.Element ctrl_elem = doc.createElement("CONTROL-CAPABILITIES");
             ctrl_elem.setTextContent(ctrl);
             //desc_elem.setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
             setCONTROLCAPABILITIES(ctrl_elem);
             return true;
         }
         
         
         /**
          * Returns this site object default ctrl field.Returns null if empty or not found.
          */
          public String getDefaultCtrl(){
        	  if(getMediaControl()!=null)
        	  {
        		  return getMediaControl().getDEFAULTCTRL();
        	  }
        	  return null;
          }
        
          
         /**
          * Sets site Default Ctrl field.Returns true if everything goes ok
          */
          public boolean setDefaultCtrl(String defCtrl){
        	  if(getMediaControl()!=null)
        	  {
        		  getMediaControl().setDEFAULTCTRL(defCtrl);
        		  return true;
        	  }
        	  setMediaControl(new MediaControl());
        	  getMediaControl().setDEFAULTCTRL(defCtrl);
    		  return true;
          }
          
        
          /**
           * Returns this site object audio ctrl field.Returns null if empty or not found.
           */
           public String getAudioCtrl(){
        	  if(getMediaControl()!=null)
         	  {
         		  return getMediaControl().getAUDIOCTRL();
         	  }
         	  return null;
           }
               
           
           /**
            * Sets site Default Ctrl field.Returns true if everything goes ok
            */
            public boolean setAudioCtrl(String audioCtrl){
          	  if(getMediaControl()!=null)
          	  {
          		  getMediaControl().setAUDIOCTRL(audioCtrl);
          		  return true;
          	  }
          	  setMediaControl(new MediaControl());
          	  getMediaControl().setAUDIOCTRL(audioCtrl);
          	  return true;
            }
            
               
           /**
            * Returns this site object app sharing ctrl field.Returns null if empty or not found.
            */
            public String getAppSharingCtrl(){
              	if(getMediaControl()!=null)
                {
          		  return getMediaControl().getAPPSHARINGCTRL();
          	    }
          	  return null;
            }
            
            
            /**
             * Sets site Default Ctrl field.Returns true if everything goes ok
             */
             public boolean setAppSharingCtrl(String appCtrl){
           	  if(getMediaControl()!=null)
           	  {
           		  getMediaControl().setAPPSHARINGCTRL(appCtrl);
           		  return true;
           	  }
           	  setMediaControl(new MediaControl());
           	  getMediaControl().setAPPSHARINGCTRL(appCtrl);
           	  return true;
             }
             
            
            /**
             * Returns this site object data ctrl field.Returns null if empty or not found.
             */
             public String getDataCtrl(){
            	if(getMediaControl()!=null)
           	  	{
           		  return getMediaControl().getDATACTRL();
           	  	}
           	  	return null;
             }
             
                 
             /**
              * Sets site Default Ctrl field.Returns true if everything goes ok
              */
              public boolean setDataCtrl(String dataCtrl){
            	  if(getMediaControl()!=null)
            	  {
            		  getMediaControl().setDATACTRL(dataCtrl);
            		  return true;
            	  }
            	  setMediaControl(new MediaControl());
            	  getMediaControl().setDATACTRL(dataCtrl);
            	  return true;
              }
              
              
            /**
             * Returns this site object video ctrl field.Returns null if empty or not found.
             */
             public String getVideoCtrl(){
            	 if(getMediaControl()!=null)
           	  	 {
           		    return getMediaControl().getVIDEOCTRL();
           	  	 }
           	     return null;
             }
             
             
             /**
              * Returns this site object user ID field.Returns null if empty or not found.
              */
              public String getUserID(){
            	  if(getSiteIdentification()!=null)
            	  {
            		 return getSiteIdentification().getUSERID(); 
            	  }
            	  return null;
              }
              
              
              
              public boolean setUserID(String userid){
             	  if(getSiteIdentification()!=null)
             	  {
             		 getSiteIdentification().setUSERID(userid); 
             		 return true;
             	  }
             	  return false;
               }
               
              
             /**
              * Sets site Default Ctrl field.Returns true if everything goes ok
              */
              public boolean setVideoCtrl(String videoCtrl){
            	  if(getMediaControl()!=null)
            	  {
            		  getMediaControl().setVIDEOCTRL(videoCtrl);
            		  return true;
            	  }
            	  setMediaControl(new MediaControl());
            	  getMediaControl().setVIDEOCTRL(videoCtrl);
            	  return true;
              }                 
                   
              
              /**
               * Returns this site object DN field.Returns null if empty or not found.
               */
               public String getDN(){
            	   if(getSiteIdentification()!=null && getSiteIdentification().getCERTIDENTITY()!=null)
            	   {
            		   return getSiteIdentification().getCERTIDENTITY().getDN();
            	   }
            	   return null;
               }
                 
               
               /**
                * Returns this site object FQDN field.Returns null if empty or not found.
                */
                public String getFQDN(){
                	if(getSiteIdentification()!=null && getSiteIdentification().getCERTIDENTITY()!=null)
             	   {
             		   return getSiteIdentification().getCERTIDENTITY().getFQDN();
             	   }
             	   return null;
                }
                
                
                public boolean setDN(String dn){
              	   if(getSiteIdentification()!=null && getSiteIdentification().getCERTIDENTITY()!=null)
              	   {
              		   getSiteIdentification().getCERTIDENTITY().setDN(dn);
              		   return true;
              	   }
              	   return false;
                 }
                
                
                public boolean setFQDN(String fqdn){
               	   if(getSiteIdentification()!=null && getSiteIdentification().getCERTIDENTITY()!=null)
               	   {
               		   getSiteIdentification().getCERTIDENTITY().setFQDN(fqdn);
               		   return true;
               	   }
               	   return false;
                  }
        
                
               /**
        		* Gets hamming protection mode params.
                **/
        		public int[] getHammingProtectionModeParams(){
        			int[] salida= {0,0};
        			if(getConnectionParameters()!=null && getConnectionParameters().getPROTECTION()!=null && getConnectionParameters().getPROTECTION().getHamming()!=null)
        			{
        				Hamming ham = getConnectionParameters().getPROTECTION().getHamming();
        				salida[0] = ham.getK().intValue();
        				salida[1] = ham.getN().intValue();	
        			}
        			return salida;        			
        		}
        		
        		
        		
        		public boolean setHammingProtectionMode(int k, int n){
        			if(getConnectionParameters()!=null && getConnectionParameters().getPROTECTION()!=null && getConnectionParameters().getPROTECTION().getHamming()!=null)
        			{
        				Hamming ham = getConnectionParameters().getPROTECTION().getHamming();
        				ham.setK(BigInteger.valueOf(k));
        				ham.setN(BigInteger.valueOf(n));
        				return true;        				
        			}
        			return false;        			
        		}
        		
        		
        		/**
        		 * Deletes protection mode.
        		 **/
        		public void delProtectionMode(){
        			if(getConnectionParameters()!=null && getConnectionParameters().getPROTECTION()!=null)
        			{
        				getConnectionParameters().setPROTECTION(null);
        			}
        		}
        		
        		/**
        		* Gets hamming protection mode params.
                **/
        		public int[] getParityProtectionModeParams(){
        			int[] salida= {0,0};
        			if(getConnectionParameters()!=null && getConnectionParameters().getPROTECTION()!=null && getConnectionParameters().getPROTECTION().getParity()!=null)
        			{
        				Parity ham = getConnectionParameters().getPROTECTION().getParity();
        				salida[0] = ham.getK().intValue();
        				salida[1] = ham.getN().intValue();
        				return salida;        				
        			}
        			return salida;        			
        		}
        		
        		
        		
        		public boolean setParityProtectionMode(int k, int n){
        			if(getConnectionParameters()==null)
        			{
        				ConnectionParameters con_params = new ConnectionParameters();
        				setConnectionParameters(con_params);
        			}   			
        			if(getConnectionParameters().getPROTECTION()==null)
        			{
        				ProtectionType pro = new ProtectionType();
        				getConnectionParameters().setPROTECTION(pro);
        			}
        			if(getConnectionParameters().getPROTECTION().getParity()==null)
        			{
        				Parity ham = new Parity();
        				ham.setK(BigInteger.valueOf(k));
        				ham.setN(BigInteger.valueOf(n));
        				getConnectionParameters().getPROTECTION().setParity(ham);
        			}    
        			if(getConnectionParameters().getPROTECTION().getParity()!=null)
        			{
        				Parity ham = getConnectionParameters().getPROTECTION().getParity();
        				ham.setK(BigInteger.valueOf(k));
        				ham.setN(BigInteger.valueOf(n));
        			} 
        			//if the tag protection is present, bandwith or upanddownbandwith must be before it in order to ve xml valid
        			//I check it
        			if(getConnectionParameters().getBANDWIDTH()==null && getConnectionParameters().getUpanddownbandwidth()==null)
        			{
        				getConnectionParameters().setBANDWIDTH(new Integer(0));
        			}
        			return true;        			
        		}
        		
        		
        		
        		
        		
        		
        		
        		
}


