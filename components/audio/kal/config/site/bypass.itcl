#######################################################################
#
#  ISABEL: A group collaboration tool for the Internet
#  Copyright (C) 2011 Agora System S.A.
#  
#  This file is part of Isabel.
#  
#  Isabel is free software: you can redistribute it and/or modify
#  it under the terms of the Affero GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  
#  Isabel is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  Affero GNU General Public License for more details.
# 
#  You should have received a copy of the Affero GNU General Public License
#  along with Isabel.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################

#########################################################################
#
# bypass.itcl
#
# Audio Bypass configuration.
#
#########################################################################

class AudioBypassConfigC {

    #------------------
    # PUBLIC STATIC INTERFACE
    #------------------

    # SiteId of MY audio master
    public common myMasterBypass ""
    
    #------------------
    # PUBLIC INTERFACE
    #------------------

    constructor {_siteId w} {}
    destructor {}

    # Build the gui.
    public method MakeGui {}
    
    # Accessors
    public method GetMasterBypass {}
    public method SetMasterBypass {newMasterBypass}

    #-------------------
    # PRIVATE INTERFACE
    #-------------------

    # SiteId of the site
    private variable siteId ""

    # root widget
    private variable wroot ""

    # SiteId of MY audio master
    public variable masterBypass ""

    # Initialize masterBypass
    private method InitBypass {}

    # Callback command invoked to update my bypass relation
    # This callback updates de SMS state after a delay to avoid sending to much messages.
    private method UpdateSmsBypass {args}

    # Callback command invoked to update my bypass relation
    # This callback updates de SMS state now.
    private method UpdateSmsBypassNow {}

    # Process SMS received data
    #
    # Sets the bypass state
    #
    # $args has this format:
    #     -site_id <site_id> -bypass <master_site_id1>
    private method ProcessSmsBypass {args}

    # Update the combobox list with the siteId of all the audio sites.
    private method UpdateBypassSiteList
}

#---------------------------------------------------------------------------

body AudioBypassConfigC::constructor {_siteId w} {
    global env

    set siteId $_siteId
    set wroot $w

    InitBypass

    sms joinKey Audio_bypass_$siteId [code $this ProcessSmsBypass]

    set _mySiteId [SiteManager::MySiteId]
    if {$siteId == $_mySiteId} {
	sms forceState Audio_bypass_$siteId add \
	    -site_id $siteId \
	    -bypass $masterBypass
    }
}

#---------------------------------------------------------------------------

body AudioBypassConfigC::destructor {} {

    sms leaveKey Audio_bypass_$siteId
}

#---------------------------------------------------------------------------

body AudioBypassConfigC::InitBypass {} {

    set _mySiteId [SiteManager::MySiteId]
    
    if {$siteId == $_mySiteId} {

	# Initialice my bypass in the master SMS.
	if {[info exists env(ISABEL_AUDIO_BYPASS)]} {
	    set _default_master $env(ISABEL_AUDIO_BYPASS)
	} else {

	    set _default_master ""
	}	

	set masterBypass [AudioConfigC::Load audio.bypass $_default_master]

	set myMasterBypass $masterBypass 

	UpdateSmsBypassNow

    } else {

	set masterBypass ""

    }
}

#---------------------------------------------------------------------------

body AudioBypassConfigC::MakeGui {} {

    if {[winfo exist $wroot]} { 
	return
    }

    frame $wroot  -relief sunken -bd 1
    
    button $wroot.kk
    set font [$wroot.kk cget -font]	
    destroy $wroot.kk

    #--
    
    trace vdelete  [scope masterBypass] w [code $this UpdateSmsBypass]
    trace variable [scope masterBypass] w [code $this UpdateSmsBypass]
    
    ::iwidgets::combobox $wroot.site \
	-labeltext " Bypass - Make this audio slave of:" \
	-labelpos w \
	-unique 1 \
	-completion 0 \
	-textvariable [scope masterBypass] \
	-selectioncommand [code $this UpdateSmsBypass]
    
    set _listw [$wroot.site component list]
    bind $_listw <Map> [code $this UpdateBypassSiteList]
    
    set _emsg "This option is necessary for auditoriums with several isabel PC's in order to have only\n"
    set _emsg "${_emsg}one audio from the auditorium. Bypass substitutes your audio capture by the audio of\n"
    set _emsg "${_emsg}the isabel PC with the given SiteId. This PC will manage the audio for the auditorium.\n"
    set _emsg "${_emsg}Warning: If your audio is bypassed, no sound will enter from your PC to the session."
    label $wroot.help \
	-relief flat \
	-justify left \
	-font $font \
	-text $_emsg    

    #--- 

    set _mySiteId [SiteManager::MySiteId]
    if { ! [AudioConfigC::ControlSite] && $siteId != $_mySiteId} {
	$wroot.site configure -state disabled
	$wroot.help configure -state disabled
    }

    #--- Pack
    
    grid $wroot.site -row 1 -column 0 -pady 1 -ipadx 6 -sticky nw
    grid $wroot.help -row 2 -column 0 -pady 1 -ipadx 6 -sticky wn
    
    grid columnconfigure $wroot 0 -weight 1

    grid rowconfigure    $wroot 0 -weight 1
    grid rowconfigure    $wroot 1 -weight 0
    grid rowconfigure    $wroot 2 -weight 0
    grid rowconfigure    $wroot 3 -weight 1

}

#---------------------------------------------------------------------------

body AudioBypassConfigC::GetMasterBypass {} {

    return $masterBypass
}

#---------------------------------------------------------------------------

body AudioBypassConfigC::SetMasterBypass {newMasterBypass} {
    
    set newMasterBypass [string trim $newMasterBypass]

    if {$masterBypass != $newMasterBypass} {
	set masterBypass $newMasterBypass
	
	set _mySiteId [SiteManager::MySiteId]
	if {$siteId == $_mySiteId} {
	    set myMasterBypass $masterBypass 

	    # ApplyDaemon

	    AudioConfigC::Save audio.bypass $myMasterBypass
	}
	
	# UpdateSmsBypassNow # already invoked by trace
    }
}

#---------------------------------------------------------------------------

body AudioBypassConfigC::UpdateSmsBypass {args} {

    after cancel [code $this UpdateSmsBypassNow]
    
    after 1000 [code $this UpdateSmsBypassNow]
}

#---------------------------------------------------------------------------

body AudioBypassConfigC::UpdateSmsBypassNow {} {

    after cancel [code $this UpdateSmsBypassNow]

    sms forceState Audio_bypass_$siteId add \
	-site_id $siteId \
	-bypass [string trim $masterBypass] 
}

#---------------------------------------------------------------------------

body AudioBypassConfigC::ProcessSmsBypass {args} {

    # set _site_id [getOptionListValue $args -site_id ""]
    
    set _bypass [getOptionListValue $args -bypass "_X_X_X_"]
    
    if {$_bypass == "_X_X_X_"} return
    
    
    set _bypass [string trim $_bypass]
    
    trace vdelete  [scope masterBypass] w [code $this UpdateSmsBypass]
    set masterBypass $_bypass
    trace variable [scope masterBypass] w [code $this UpdateSmsBypass]
    
    set _mySiteId [SiteManager::MySiteId]
    if {$siteId == $_mySiteId} {
	set myMasterBypass $masterBypass 
	
	# ApplyDaemon
	
	AudioConfigC::Save audio.bypass $myMasterBypass
    }
}

#---------------------------------------------------------------------------

body AudioBypassConfigC::UpdateBypassSiteList {} {

    set _listw [$wroot.site component list]

    # already existing sites:
    set _sites [$_listw get 0 end]

    # new sites:
    set _all_sites [SiteManager::GetSites]
    foreach _id $_all_sites {
	if {[lsearch -exact $_sites $_id] == -1} {
	    lappend _sites $_id
	}
    }

    # sort:
    set _sites [lsort -dictionary -unique $_sites]

    # update:
    $_listw delete 0 end
    foreach _id $_sites {
	$_listw insert end $_id
    } 
} 

#---------------------------------------------------------------------------

