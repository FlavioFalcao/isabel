/*
 * ISABEL: A group collaboration tool for the Internet
 * Copyright (C) 2009 Agora System S.A.
 * 
 * This file is part of Isabel.
 * 
 * Isabel is free software: you can redistribute it and/or modify
 * it under the terms of the Affero GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Isabel is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * Affero GNU General Public License for more details.
 * 
 * You should have received a copy of the Affero GNU General Public License
 * along with Isabel.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * DaemonTest.java
 *
 * Created on 14 de julio de 2003, 17:49
 */

package isabel.sam;

import java.io.*;
import java.net.*;
import java.util.StringTokenizer;

/**
 * Pequeña aplicación para probar el demonio de audio.
 * @author  Fernando Escribano
 */
public class DaemonTest extends javax.swing.JFrame {
    
    /** Creates new form DaemonTest */
    public DaemonTest(int port) {
        initComponents();
        connect(port);
        initSelector();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        outputPane = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        controlSelector = new javax.swing.JComboBox();
        controlPane = new javax.swing.JPanel();
        muteCheckBox = new javax.swing.JCheckBox();
        captureCheckBox = new javax.swing.JCheckBox();
        volumeSlider = new javax.swing.JSlider();
        refreshButton = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        outputTextArea.setBackground(new java.awt.Color(0, 0, 0));
        outputTextArea.setEditable(false);
        outputTextArea.setForeground(new java.awt.Color(102, 255, 51));
        outputTextArea.setRows(15);
        outputPane.setViewportView(outputTextArea);

        getContentPane().add(outputPane, java.awt.BorderLayout.CENTER);

        controlSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                controlSelectorActionPerformed(evt);
            }
        });

        getContentPane().add(controlSelector, java.awt.BorderLayout.NORTH);

        muteCheckBox.setText("Mute");
        muteCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                muteCheckBoxActionPerformed(evt);
            }
        });

        controlPane.add(muteCheckBox);

        captureCheckBox.setText("Capture");
        captureCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                captureCheckBoxActionPerformed(evt);
            }
        });

        controlPane.add(captureCheckBox);

        volumeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                volumeSliderStateChanged(evt);
            }
        });

        controlPane.add(volumeSlider);

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        controlPane.add(refreshButton);

        getContentPane().add(controlPane, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void error(Exception e) {
        System.out.println(e);
        System.exit(1);
    }
    
    private void send(String s) {
        out.println(s);
        println("c: " + s);
    }
    
    private String read() {
        try {
            String s = in.readLine();
            println("s:" + s);
            return s;
        }catch (IOException e) {
            error(e);
            return null;
        }
    }
    
    private void initSelector() {
        send("sam_query_controls()");
        StringTokenizer st = new StringTokenizer(read(), "{}");
        while(st.hasMoreTokens())
            controlSelector.addItem(st.nextToken());
    }
    
    private void connect(int port) {
        try {
            print("conecting to port " + port + "...");
            Socket s = new Socket("localhost", port);
            in = new BufferedReader(new InputStreamReader(s.getInputStream()));
            out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(s.getOutputStream())), true);
            println("done");
        }catch(IOException e) {
            error(e);
        }
    }
    
    private void print(String s) {
        outputTextArea.append(s);
    }
    
    private void println(String s) {
        outputTextArea.append(s + "\n");
        outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
        
    }
    
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        String control = (String)controlSelector.getSelectedItem();
        send("sam_get_status(" + control + ")");
        StringTokenizer st = new StringTokenizer(read(), "{} ");
        volumeSlider.setValue(new Integer(st.nextToken()).intValue());
        
        muteCheckBox.setSelected(st.nextToken().equalsIgnoreCase("TRUE"));
        
        captureCheckBox.setSelected(st.nextToken().equalsIgnoreCase("TRUE"));
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void controlSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_controlSelectorActionPerformed
        String control = (String)controlSelector.getSelectedItem();
        send("sam_query_volume(" + control + ")");
        String response = read();
        volumeSlider.setEnabled(response.equalsIgnoreCase("TRUE"));
        
        send("sam_query_mute(" + control + ")");
        response = read();
        muteCheckBox.setEnabled(response.equalsIgnoreCase("TRUE"));
        
        send("sam_query_capture(" + control + ")");
        response = read();
        captureCheckBox.setEnabled(response.equalsIgnoreCase("TRUE"));
    }//GEN-LAST:event_controlSelectorActionPerformed

    private void captureCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_captureCheckBoxActionPerformed
        String control = (String)controlSelector.getSelectedItem();
        if(captureCheckBox.isSelected()) {
            send("sam_set_capture(" + control + ")");
            read();
        }
        else {
            send("sam_set_nocapture(" + control + ")");
            read();
        }            
    }//GEN-LAST:event_captureCheckBoxActionPerformed

    private void muteCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_muteCheckBoxActionPerformed
        String control = (String)controlSelector.getSelectedItem();
        if(muteCheckBox.isSelected()) {
            send("sam_set_mute(" + control + ")");
            read();
        }
        else {
            send("sam_set_unmute(" + control + ")");
            read();
        }            
    }//GEN-LAST:event_muteCheckBoxActionPerformed

    private void volumeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_volumeSliderStateChanged
        if (!volumeSlider.getValueIsAdjusting()) {
            String control = (String)controlSelector.getSelectedItem();
            send("sam_set_volume(" + control + "," + volumeSlider.getValue() + ")");
            read();
        }
    }//GEN-LAST:event_volumeSliderStateChanged
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        send("sam_quit()");
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        int port = Integer.parseInt(args[0]);
        new DaemonTest(port).show();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox captureCheckBox;
    private javax.swing.JPanel controlPane;
    private javax.swing.JComboBox controlSelector;
    private javax.swing.JCheckBox muteCheckBox;
    private javax.swing.JScrollPane outputPane;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JButton refreshButton;
    private javax.swing.JSlider volumeSlider;
    // End of variables declaration//GEN-END:variables
    
    private BufferedReader in;  
    private PrintWriter out;
}
