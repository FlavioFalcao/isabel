########################################################################
#
#  ISABEL: A group collaboration tool for the Internet
#  Copyright (C) 2009 Agora System S.A.
#  
#  This file is part of Isabel.
#  
#  Isabel is free software: you can redistribute it and/or modify
#  it under the terms of the Affero GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  
#  Isabel is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  Affero GNU General Public License for more details.
# 
#  You should have received a copy of the Affero GNU General Public License
#  along with Isabel.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################

#########################################################################
#
# environ.itcl
#
# Environment variables generated by the SETUP application.
#
#########################################################################

#===============================================================
#
# EnvironmentC class
#
#===============================================================


class EnvironmentC {

    # Main page
    public variable session_id
    
    # Role definition
    public variable role      "" "CheckValidRole role"
    public variable is_master "" "Check10 is_master ISABEL_IS_MASTER"

    # Session port
    public variable session_port ""
    
    # Session password
    public variable password ""

    # Site identification
    public variable site_id     "" "CheckValidSiteId site_id"
    public variable public_name "" "CheckValidPublicName public_name"
    public variable workdir "" "CheckDir workdir ISABEL_WORKDIR"
    public variable hostname "" 
    
    # Scenary display
    public variable scenary_display    "" "CheckScenaryDisplay scenary_display"

    # Control displays
    public variable ctrl_display           "" "CheckCtrlDisplay ctrl_display"
    public variable audio_ctrl_display     "" "CheckCtrlDisplay audio_ctrl_display"
    public variable scripts_ctrl_display   "" "CheckCtrlDisplay scripts_ctrl_display"
    
    # Network Access Parameters
    public variable network_access  "" 
    public variable connect_to
    public variable connect_to_ip
    public variable use_multicast "" "Check10 use_multicast ISABEL_USE_MULTICAST"
    public variable mcast_bw   "" "CheckNumber mcast_bw ISABEL_MCASTBW"
    public variable mcast_ttl  "" "CheckNumber mcast_ttl ISABEL_MCAST_TTL"
    public variable mcast_audio_group
    public variable mcast_vumeter_group
    public variable mcast_video_group
    public variable mcast_ftp_group
    public variable mcast_pointer_group
    public variable mcast_shdisplay_group
    public variable use_flowserver "" "Check10 use_flowserver ISABEL_USE_FLOWSERVER"
    #public variable fs_upbw      "CheckNumber fs_upbw   ISABEL_FSUPBW"
    public variable fs_upbw     "" 
    #public variable fs_downbw   "" "CheckNumber fs_downbw ISABEL_FSDOWNBW"
    public variable fs_downbw   "" 
    public variable isdn_numbers
    public variable isdn_channels

    # IROUTER: FEC, AudioMixer
    public variable irouter_fec
    public variable audiomixer

    # Interactive site configuration
    public variable master
    
    # Master site configuration
    public variable service
    
    # EDL Local variables names.
    public variable edlLocalVarNames

    # $edlLocal($name) is the value of the EDL Local variable called $name. 
    private variable edlLocal

    # EDL Global variables names.
    # These variables are defined in the master site, and sent to interactive sites during
    # the connection phase.
    public variable edlGlobalVarNames

    # $edlGlobal($name) is the value of the EDL Global variable called $name. 
    private variable edlGlobal

    # Values from shell and the launching script
    public variable display
    public variable adisplay
    public variable install_dir
    public variable debug_level     0  "CheckNumber debug_level ISABEL_DEBUG"
    public variable tcl           
    public variable user_dir        "" "CheckDir user_dir      ISABEL_USER_DIR"
    public variable config_dir      "" "CheckDir config_dir    ISABEL_CONFIG_DIR"
    public variable sessions_dir    "" "CheckDir sessions_dir  ISABEL_SESSIONS_DIR"
    public variable setup_dir       "" "CheckDir setup_dir     ISABEL_SETUP_DIR"

    constructor {siteConfigFile} {}

    # Load the values defined in the given site config file,
    # and saves then as environment variables.
    private method LoadSiteConfigFile {siteConfigFile}


    # Assign the value of the environment variable "envvar" to the variable "opt".
    # If this value is empty, then assign $defaultvalue.
    private method InitOpt  {opt envvar {defaultvalue ""}} {}

    # Assign the value of the environment variable "envvar" to the variable "opt".
    # If this variable does not exist, then assign the value of the environment variable "envvar2".
    private method InitOpt2 {opt envvar envvar2} {}

    private method CheckValidRole {varname} {}
    private method CheckValidSiteId {varname} {}
    private method CheckValidPublicName {varname} {}
    private method CheckDir {varname envvar} {}
    private method CheckNumber {varname envvar} {}
    private method CheckYesNo {varname envvar} {}
    private method Check10 {varname envvar} {}
    private method CheckScenaryDisplay {varname} {}
    private method CheckCtrlDisplay    {varname} {}

    # Sets the EDL global variables.
    # $gv is a list of varname varvalue elements.
    public method SetEdlGlobalVars {args}

    private variable received_global_vars 0

    # Returns a list of {varname varvalue} elements for all the
    # EDL global variables.
    private method GetEdlGlobalVars {}

    # Returns the value of the given EDL variable.
    public method GetEdlGlobalVar {varname}
    public method GetEdlLocalVar  {varname}

    public method Dump {} {}

    # Auxiliar variable: list of valid displays.
    private variable valid_displays ""


    #------------------------------------------
    # Master-Interactive protocol.
    # Get environment variables which are only
    # defined in the master site.
    #------------------------------------------

    # The master site sends a message with the master environment definition to the SeCo isabel_master_event group.
    # Interactive sites must receive this message to know these values.
    public method WaitForMasterEnviron {}

    # Master site publishes its environment in the "isabel_master_event" group of SeCo when this method is invoked.
    public method PublishMasterEnviron {}
}

#--------------------------------------------------


body EnvironmentC::constructor {siteConfigFile} {
    global env

    LoadSiteConfigFile $siteConfigFile

    InitOpt -session_id  ISABEL_SESSION_ID
    InitOpt -session_port ISABEL_SESSION_PORT
    InitOpt -role        ISABEL_ROLE
    InitOpt -password    ISABEL_PASSWD
    InitOpt -is_master   ISABEL_IS_MASTER
    InitOpt -site_id     ISABEL_SITE_ID
    InitOpt -public_name ISABEL_PUBLIC_NAME
    InitOpt -workdir     ISABEL_WORKDIR
    InitOpt -hostname    ISABEL_HOSTNAME
    InitOpt -scenary_display    ADISPLAY

    InitOpt2 -ctrl_display           ISABEL_CTRL_DISPLAY           DISPLAY
    InitOpt2 -audio_ctrl_display     ISABEL_AUDIO_CTRL_DISPLAY     DISPLAY
    InitOpt2 -scripts_ctrl_display   ISABEL_SCRIPTS_CTRL_DISPLAY   DISPLAY

    InitOpt -network_access  ISABEL_NETWORK_ACCESS

    InitOpt -connect_to     ISABEL_CONNECT_TO
    InitOpt -connect_to_ip  ISABEL_CONNECT_TO_IP
    regsub  -all {[][]} $connect_to    ""  connect_to
    regsub  -all {[][]} $connect_to_ip ""  connect_to_ip

    InitOpt -use_multicast              ISABEL_USE_MULTICAST
    InitOpt -mcast_bw                   ISABEL_MCASTBW
    InitOpt -mcast_ttl                  ISABEL_MCAST_TTL
    InitOpt -mcast_audio_group          ISABEL_MCAST_AUDIO_GROUP
    InitOpt -mcast_vumeter_group        ISABEL_MCAST_VUMETER_GROUP
    InitOpt -mcast_video_group          ISABEL_MCAST_VIDEO_GROUP
    InitOpt -mcast_ftp_group            ISABEL_MCAST_FTP_GROUP
    InitOpt -mcast_pointer_group        ISABEL_MCAST_POINTER_GROUP
    InitOpt -mcast_shdisplay_group      ISABEL_MCAST_SHDISPLAY_GROUP

    InitOpt -use_flowserver  ISABEL_USE_FLOWSERVER
    InitOpt -fs_upbw     ISABEL_FSUPBW   0
    InitOpt -fs_downbw   ISABEL_FSDOWNBW 0

    InitOpt -isdn_numbers  ISABEL_ISDN_NUMBERS
    InitOpt -isdn_channels ISABEL_ISDN_CHANNELS

    InitOpt -irouter_fec  ISABEL_IROUTER_FEC

    InitOpt -service      ISABEL_SERVICE

    InitOpt -edlGlobalVarNames ISABEL_GLOBAL_VAR "ISABEL_CTRL_SITES ISABEL_HIDDEN_SITES ISABEL_TEACHER_SITES ISABEL_CHAIR_SITES"
    foreach i $edlGlobalVarNames {
	if {![info exists env($i)]} {
	    #ErrorTraceMsg "Global EDL variable \"$i\" has no assigned value."
	    set edlGlobal($i) ""
	    continue
	} 
	set edlGlobal($i) $env($i)
    }

    InitOpt -edlLocalVarNames  ISABEL_LOCAL_VAR
    foreach i $edlLocalVarNames {
	if {![info exists env($i)]} {
	    ErrorTraceMsg "Local EDL variable \"$i\" has no assigned value."
	    continue
	} 
	set edlLocal($i) $env($i)
    }

    InitOpt -display      DISPLAY
    InitOpt -adisplay     ADISPLAY
    InitOpt -install_dir  ISABEL_DIR
    InitOpt -debug_level  ISABEL_DEBUG
    InitOpt -tcl          ISABEL_TCL
    InitOpt -user_dir     ISABEL_USER_DIR
    InitOpt -config_dir   ISABEL_CONFIG_DIR
    InitOpt -sessions_dir ISABEL_SESSIONS_DIR
    InitOpt -setup_dir    ISABEL_SETUP_DIR
}

#--------------------------------------------------

body EnvironmentC::LoadSiteConfigFile {siteConfigFile} {
    global env

    if {$siteConfigFile == ""} {
	return
    }

    if {![file exists $siteConfigFile]} {
	ErrorTraceMsg "Site config file \"$siteConfigFile\" not found."    
	return -code 1
    }
    
    if {![file isfile $siteConfigFile]} {
	ErrorTraceMsg "Site config file \"$siteConfigFile\" is not a regular file."
	return -code 1
    }
    
    if {![file readable $siteConfigFile]} {
	ErrorTraceMsg "Site config file \"$siteConfigFile\" is not readable."
	return -code 1
    }
    
    if {[catch {set fdbd [open $siteConfigFile r]} emsg]} {
	ErrorTraceMsg "Site config file error: $emsg"
	return -code 1
    }
    
    while {[gets $fdbd line] >= 0} {
	# removes coments and empty lines.
	if {[string index $line 0] == "#" || [string trim $line] == ""} {
	    continue
	}
	if {[regexp "^(\[^ =\]*)= *(.*)\$" $line todo var val] == 0} {
	    ErrorTraceMsg "Site config file: syntax error in line: $line"
	    continue
	} else {
	    # return if variable name is empty.
	    if {$var == ""} {
		continue
	    }
	    regsub -all {\\(.)} $val {\1} val
	    set env($var) [string trim $val]
	}
    }
    close $fdbd
}

#--------------------------------------------------

body EnvironmentC::InitOpt {opt envvar {defaultvalue ""}} {
    global env

    if {![info exists env($envvar)]} {
	ErrorMsgC #auto quit "Environment variable \"$envvar\" not found."
    } 

    if {$env($envvar) != ""} { 
	configure $opt $env($envvar)
    } else {
	configure $opt $defaultvalue
    }
}

#--------------------------------------------------

body EnvironmentC::InitOpt2 {opt envvar envar2} {
    global env

    if {[info exists env($envvar)]} {
	configure $opt $env($envvar)
    } elseif {[info exists env($envvar2)]} {
	configure $opt $env($envvar2)
    } else {
	ErrorMsgC #auto quit "Environment variables \"$envvar\" and \"$envvar2\" not found."
    } 

}

#--------------------------------------------------

body EnvironmentC::CheckValidRole {varname} {
    upvar $varname vn

    return 

    if {[lsearch -exact "Interactive MCU SipGateway FlashGateway GatewayClient" $vn] == -1} {
	ErrorMsgC #auto quit "Invalid ISABEL role: $vn."
    }
}

#--------------------------------------------------

body EnvironmentC::CheckValidSiteId {varname} {
    upvar $varname vn

    if {[regexp {^[-a-zA-Z0-9_]+$} $vn] == 0} {
	ErrorMsgC #auto quit \
		"Invalid Site ID: \"$vn\"" \
		"Valid characters are: a-z, A-Z, 0-9 and _"
    }
    if 0 {
	if {[string length $vn] > 5} {
	    ErrorMsgC #auto quit \
		    "Invalid Site ID: \"$vn\"" \
		    "Maximum Site ID length is 5."
	}
    }
}

#--------------------------------------------------

body EnvironmentC::CheckValidPublicName {varname} {
    upvar $varname vn
    
    foreach c {(),\ } {
	if {[string first $c $vn] != -1} {
	    ErrorMsgC #auto quit "Invalid char \"$c\" in public name."
	}
    }
}

#--------------------------------------------------

body EnvironmentC::CheckDir {varname envvar} {
    upvar $varname vn

    if {![file isdirectory $vn]} {
	ErrorMsgC #auto quit \
		"Directory $vn not found." \
		"$envvar environment variable."
    }

    if {![file writable $vn]} {
	ErrorMsgC #auto quit \
		"Directory $vn is not writable." \
		"$envvar environment variable."
    }
}

#--------------------------------------------------

body EnvironmentC::CheckNumber {varname envvar} {
    upvar $varname vn

    if {![regexp {^[0-9]+$} $vn]} {
	ErrorMsgC #auto quit \
		"Environment variable $envvar" \
		"Invalid value: \"$vn\"." \
                "Must be a integer number."
    }
}

#--------------------------------------------------

body EnvironmentC::CheckYesNo {varname envvar} {
    upvar $varname vn

    if {[lsearch -exact "yes no" $vn] == -1} {
	ErrorMsgC #auto quit \
		"Environment variable $envvar" \
		"Invalid value: \"$vn\"." \
                "Must be \"yes\" or  \"no\"."
    }
}

#--------------------------------------------------

body EnvironmentC::Check10 {varname envvar} {
    upvar $varname vn

    if {[lsearch -exact "1 0" $vn] == -1} {
	ErrorMsgC #auto quit \
		"Environment variable $envvar" \
		"Invalid value: \"$vn\"." \
                "Must be \"1\" or  \"0\"."
    }
}

#--------------------------------------------------

body EnvironmentC::CheckScenaryDisplay  {varname} {
    upvar $varname vn

    if {[lsearch -exact $valid_displays $vn] != -1} return

    if {[catch {toplevel .testenvdis -screen $vn} errmsg]} {
	
	if {$varname == "scenary_display"} {
	    set other :0.0
	} else {
	    set other $scenary_display
	}
	
	ErrorMsgC #auto close \
		"Warning:" \
		"" \
		"I can't open display $vn ($varname)" \
		"" \
		"Using $other" \
		"" \
		"Reason: $errmsg" 


	set vn $other
    } else {
	destroy .testenvdis
	lappend valid_displays $vn
	return
    }
}

#--------------------------------------------------

body EnvironmentC::CheckCtrlDisplay  {varname} {
    upvar  $varname vn
    global env

    if {$vn == ""} {
	set vn $env(DISPLAY)
	return
    }

    if {[lsearch -exact $valid_displays $vn] != -1} return

    if {[catch {toplevel .testenvdis -screen $vn}]} {
	
	if {$varname == "ctrl_display"} {
	    set other $env(DISPLAY)
	} else {
	    set other $ctrl_display
	}
	
	ErrorMsgC #auto close \
		"Warning:" \
		"" \
		"I can't open display $vn ($varname)" \
		"" \
		"Using $other"

	set vn $other
    } else {
	destroy .testenvdis
	lappend valid_displays $vn
	return
    }
}

#--------------------------------------------------

body EnvironmentC::SetEdlGlobalVars {args} {
    global env

    set received_global_vars 1

    for {set _i 0} {$_i < [llength $args]} {} {
	
	set vname  [lindex $args $_i]
	incr _i
	set vvalue [lindex $args $_i]
	incr _i
	set edlGlobal($vname) $vvalue
	set env($vname) $vvalue
    }
}

#--------------------------------------------------

body EnvironmentC::GetEdlGlobalVars {} {

    set res ""
    foreach i [array names edlGlobal] {
	lappend res $i $edlGlobal($i)
    }
    return $res
}

#--------------------------------------------------

body EnvironmentC::GetEdlGlobalVar {varname} {

    if {[info exists edlGlobal($varname)]} {
	return $edlGlobal($varname)
    } else {
	return ""
    }
}

#--------------------------------------------------

body EnvironmentC::GetEdlLocalVar  {varname} {

    if {[info exists edlLocal($varname)]} {
	return $edlLocal($varname)
    } else {
	return ""
    }
}

#--------------------------------------------------

body EnvironmentC::Dump {} {

    puts "Setup Values"
    puts ============
    puts "ISABEL_SESSION_ID (-session_id) = $session_id"
    puts "ISABEL_SESSION_PORT (-session_port) = $session_port"
    puts "ISABEL_ROLE (-role) = $role"
    puts "ISABEL_IS_MASTER (-is_master) = $is_master"
    puts "ISABEL_SITE_ID (-site_id) = $site_id"
    puts "ISABEL_PUBLIC_NAME (-public_name) = $public_name"
    puts "ISABEL_WORKDIR (-workdir) = $workdir"
    #puts "ISABEL_HOSTNAME (-hostname) = $hostname"

    puts "ISABEL_SCENARY_DISPLAY (-scenary_display) = $scenary_display"

    puts "ISABEL_CTRL_DISPLAY (-ctrl_display) = $ctrl_display"
    puts "ISABEL_AUDIO_CTRL_DISPLAY (-audio_ctrl_display) = $audio_ctrl_display"
    puts "ISABEL_SCRIPTS_CTRL_DISPLAY (-scripts_ctrl_display) = $scripts_ctrl_display"

    puts "ISABEL_NETWORK_ACCESS (-network_access) = $network_access"

    puts "ISABEL_CONNECT_TO    (-connect_to) = $connect_to"
    puts "ISABEL_CONNECT_TO_IP (-connect_to_ip) = $connect_to_ip"

    puts "ISABEL_USE_MULTICAST (-use_multicast) = $use_multicast"
    puts "ISABEL_MCASTBW (-mcast_bw) = $mcast_bw"
    puts "ISABEL_MCAST_TTL (-mcast_ttl) = $mcast_ttl"
    puts "ISABEL_MCAST_AUDIO_GROUP (-mcast_audio_group) = $mcast_audio_group"
    puts "ISABEL_MCAST_VUMETER_GROUP (-mcast_vumeter_group) = $mcast_vumeter_group"
    puts "ISABEL_MCAST_VIDEO_GROUP (-mcast_video_group) = $mcast_video_group"
    puts "ISABEL_MCAST_FTP_GROUP (-mcast_ftp_group) = $mcast_ftp_group"
    puts "ISABEL_MCAST_POINTER_GROUP (-mcast_pointer_group) = $mcast_pointer_group"
    puts "ISABEL_MCAST_SHDISPLAY_GROUP (-mcast_shdisplay_group) = $mcast_shdisplay_group"

    puts "ISABEL_USE_FLOWSERVER (-use_flowserver) = $use_flowserver"
    puts "ISABEL_FSUPBW   (-fs_upbw)   = $fs_upbw"
    puts "ISABEL_FSDOWNBW (-fs_downbw) = $fs_downbw"

    puts "ISABEL_ISDN_NUMBERS  (-isdn_numbers)  = $isdn_numbers"
    puts "ISABEL_ISDN_CHANNELS (-isdn_channels) = $isdn_channels"

    puts "ISABEL_IROUTER_FEC (-irouter_fec) = $irouter_fec"

    puts "ISABEL_SERVICE (-service) = $service"

    puts "EDL Global variables"
    puts =============================
    foreach i [array names edlGlobal] {
	puts "  $i = $edlGlobal($i)"
    }

    puts "EDL Local variables"
    puts =============================
    foreach i [array names edlLocal] {
	puts "  $i = $edlLocal($i)"
    }

    puts "Shell and Start Script Values"
    puts =============================
    puts "DISPLAY (-display) = $display"
    puts "ADISPLAY (-adisplay) = $adisplay"
    puts "ISABEL_DIR (-install_dir) = $install_dir" 
    puts "ISABEL_DEBUG (-debug_level) = $debug_level" 
    puts "ISABEL_TCL (-tcl) = $tcl" 
    puts "ISABEL_USER_DIR (-user_dir) = $user_dir"     
    puts "ISABEL_CONFIG_DIR (-config_dir) = $config_dir"     
    puts "ISABEL_SESSIONS_DIR (-sessions_dir) = $sessions_dir"     
    puts "ISABEL_SETUP_DIR (-setup_dir) = $setup_dir"     

}

#--------------------------------------------------

body EnvironmentC::PublishMasterEnviron {} {
 
   network RDOSync isabel_master_event 0 \
       "EI SetMasterEnviron [GetEdlGlobalVars]"
}

#--------------------------------------------------

body EnvironmentC::WaitForMasterEnviron {} {

    while {! $received_global_vars} {
	update
	after 100
    }
}

#--------------------------------------------------

