########################################################################
#
#  ISABEL: A group collaboration tool for the Internet
#  Copyright (C) 2009 Agora System S.A.
#  
#  This file is part of Isabel.
#  
#  Isabel is free software: you can redistribute it and/or modify
#  it under the terms of the Affero GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  
#  Isabel is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  Affero GNU General Public License for more details.
# 
#  You should have received a copy of the Affero GNU General Public License
#  along with Isabel.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################


#-----------------------------------------

class PresentationListTCC {
    inherit NodeTCC
    
    #-- Node attributes
    
    public variable presentations
    
    #-- Building the tree
    
    # $args is a list of presentations
    constructor {_agendaobj args} {
	NodeTCC::constructor $_agendaobj} {}
    
    destructor {}
    
    public proc parse {agendaobj str}
    
    public method prettyPrinter {{offset 0}}
    
    public method getNodes {}
    
    #-- Node deletion

    # Delete all the presentations, but without leaving orfan references.
    # Thios means: delete all the presentations whose authors have reference counter equal to 0.
    public method deleteUnreferencedPresentations {}

    #-- Children operations
    
    # Delete the indicated child node.
    # It is a PresentationTCC object.
    public method deletePresentation {_presentation}
    
    # Move the given presentation $_offset positions in $presentations
    public method movePresentation {_presentation _offset}

    # Returns 1 if $_presentation is the first presentation, otherwise returns 0.
    public method firstPresentation {_presentation}
    
    # Returns 1 if $_presentation is the last presentation, otherwise returns 0.
    public method lastPresentation {_presentation}

}

#-----------------------------------------

body PresentationListTCC::constructor {_agendaobj args} {
    
    foreach p $args {
	CheckClass  $p PresentationTCC
	CheckUnique $p 
	$p setParent $this
    }
    set presentations $args
}

#-----------------------------------------

body PresentationListTCC::destructor {} {
    
    set _auxpresentations $presentations
    set presentations ""
    foreach c $_auxpresentations {
	    delete object $c
    }
}

#-----------------------------------------

body PresentationListTCC::parse {agendaobj str} {
    
    #set class     [lindex $str 0]
    #CheckStrings $class PresentationList

    set cl ""
    set cont 0
    set c [lindex $str $cont]
    while {$c != ""} {
        set presentation [PresentationTCC::parse $agendaobj $c]
        lappend cl $presentation
        incr cont
        set c [lindex $str $cont]
    }

    set me [eval PresentationListTCC ::#auto $agendaobj $cl]

    foreach c $cl {
        $c setParent $me
    }

    return $me
}

#-----------------------------------------

body PresentationListTCC::prettyPrinter {{offset 0}} {
    
    set _res ""
    foreach p $presentations {
        if {$_res != ""} {
	    set _res "$_res\n"
	}
        set _res "$_res[$p prettyPrinter $offset]"
    }
    return $_res
}

#-----------------------------------------

body PresentationListTCC::getNodes {} {
    
    set res ""
    foreach c $presentations {
	lappend res [$c getMyNode]
    }
    return $res
}

#-----------------------------------------

body PresentationListTCC::deleteUnreferencedPresentations {} {

    foreach _pres $presentations {
	if { ! [$_pres isReferenced]} {
	    deletePresentation $_pres
	}
    }
}

#-----------------------------------------

body PresentationListTCC::deletePresentation {_presentation} {
    
    set pos [lsearch -exact $presentations $_presentation]
    
    if {$pos == -1} return
    
    set child [lindex $presentations $pos]
    set presentations [lreplace $presentations $pos $pos]
    $child kill
    $agendaobj refresh
}

#-----------------------------------------

body PresentationListTCC::movePresentation {_presentation _offset} {
    
    set pos [lsearch -exact $presentations $_presentation]
    
    if {$pos == -1} return
    
    set child [lindex $presentations $pos]
    set presentations [lreplace $presentations $pos $pos]
    
    set newpos [expr $pos + $_offset]

    set presentations [linsert $presentations $newpos $child]

    $agendaobj refresh
}


#-----------------------------------------

body PresentationListTCC::firstPresentation {_presentation} {
    
    if {[lindex $presentations 0] == $_presentation} {
	return 1
    } else {
	return 0
    }
}
   
#-----------------------------------------

body PresentationListTCC::lastPresentation {_presentation} {

    if {[lindex $presentations end] == $_presentation} {
	return 1
    } else {
	return 0
    }
}


#-----------------------------------------

